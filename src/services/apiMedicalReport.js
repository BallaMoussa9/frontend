// src/services/apiMedicalReports.js
import API from '@/services/axios';

// üö® NOUVELLE M√âTHODE : R√©cup√©rer les rapports pour un docteur et patient sp√©cifiques
// Correspond √† GET /api/doctors/{doctorId}/patients/{patientId}/medical-reports
export const fetchMedicalReportsByDoctorAndPatient = async (doctorId, patientId) => {
    try {
        const response = await API.get(`/doctors/${doctorId}/patients/${patientId}/medical-reports`);
        return response.data;
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration des rapports m√©dicaux pour docteur/patient:", error);
        throw error;
    }
};

// üö® NOUVELLE M√âTHODE : Cr√©er un rapport m√©dical pour un docteur et patient sp√©cifiques
// Correspond √† POST /api/doctors/{doctorId}/patients/{patientId}/medical-reports
export const createMedicalReportByDoctorAndPatient = async (doctorId, patientId, reportData) => {
    try {
        const response = await API.post(`/doctors/${doctorId}/patients/${patientId}/medical-reports`, reportData);
        return response.data;
    } catch (error) {
        console.error("Erreur lors de la cr√©ation du rapport m√©dical pour docteur/patient:", error);
        throw error;
    }
};

// --- Fonctions pour les routes /medicalreports existantes ---

// Correspond √† POST /api/medicalreports/register/{patient}
export const createMedicalReportLegacy = async (patientId, reportData) => {
    try {
        const response = await API.post(`/medicalreports/register/${patientId}`, reportData);
        return response.data;
    } catch (error) {
        console.error("Erreur lors de la cr√©ation du rapport m√©dical via route legacy:", error);
        throw error;
    }
};

// Correspond √† GET /api/medicalreports
export const getAllMedicalReports = async (params = {}) => {
    try {
        const response = await API.get(`/medicalreports`, { params });
        return response.data;
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration de tous les rapports m√©dicaux:", error);
        throw error;
    }
};

// Correspond √† GET /api/medicalreports/search
export const searchMedicalReports = async (params) => {
    try {
        const response = await API.get(`/medicalreports/search`, { params });
        return response.data;
    } catch (error) {
        console.error("Erreur lors de la recherche des rapports m√©dicaux:", error);
        throw error;
    }
};

// Correspond √† GET /api/medicalreports/{report}
export const getMedicalReportById = async (reportId) => {
    try {
        const response = await API.get(`/medicalreports/${reportId}`);
        return response.data;
    } catch (error) {
        console.error(`Erreur lors de la r√©cup√©ration du rapport m√©dical ${reportId}:`, error);
        throw error;
    }
};

// Correspond √† DELETE /api/medicalreports/{report}
export const deleteMedicalReport = async (reportId) => {
    try {
        const response = await API.delete(`/medicalreports/${reportId}`);
        return response.data;
    } catch (error) {
        console.error(`Erreur lors de la suppression du rapport m√©dical ${reportId}:`, error);
        throw error;
    }
};

// Correspond √† PUT /api/medicalreports/{report}
export const updateMedicalReport = async (reportId, reportData) => {
    try {
        const response = await API.put(`/medicalreports/${reportId}`, reportData);
        return response.data;
    } catch (error) {
        console.error(`Erreur lors de la mise √† jour du rapport m√©dical ${reportId}:`, error);
        throw error;
    }
};

// Correspond √† GET /api/medicalreports/{report}/download
export const downloadMedicalReport = async (reportId) => {
    try {
        // Important: responseType 'blob' pour les t√©l√©chargements de fichiers
        const response = await API.get(`/medicalreports/${reportId}/download`, { responseType: 'blob' });
        return response.data;
    } catch (error) {
        console.error(`Erreur lors du t√©l√©chargement du rapport m√©dical ${reportId}:`, error);
        throw error;
    }
};