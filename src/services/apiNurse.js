import API from './axios' // Utilise ton instance axios configur√©e

export const apiGetNurseall = async () => {
  try {
    const response = await API.get('/nurse/')
    console.log('R√©cup√©ration infirmiers :', response.data)
    return response.data
  } catch (error) {
    console.error('Erreur r√©cup√©ration des infirmiers :', error)
    throw new Error(error.response?.data?.message || 'Erreur de connexion')
  }
}

export const apiGetNurse = async (id) => {
  try {
    const response = await API.get(`/nurse/${id}`)
    console.log('D√©tails de l\'infirmier r√©cup√©r√©s avec succ√®s :', response.data)
    return response.data
  } catch (error) {
    console.error('Erreur r√©cup√©ration infirmier :', error)
    throw new Error(error.response?.data?.message || 'Erreur de connexion')
  }
}

export const apiUpdateNurse = async (id, data) => {
  try {
    // Note: Utilisation de _method=PUT pour simuler une requ√™te PUT avec le Content-Type: multipart/form-data
    await API.post(`/nurse/${id}?_method=PUT`, data, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
  } catch (error) {
    console.error('Erreur mise √† jour infirmier :', error);
    throw new Error(error.response?.data?.message || 'Erreur de connexion');
  }
};


export const apiDeleteNurse = async (id) => {
  try {
    await API.delete(`/nurse/${id}`)
  } catch (error) {
    console.error('Erreur suppression infirmier :', error)
    throw new Error(error.response?.data?.message || 'Erreur de connexion')
  }
}

// Cr√©ation d'un infirmier
export const apiCreateNurse = async (formData) => {
  try {
    await API.post('/nurse/register', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })
  } catch (error) {
    console.error('Erreur cr√©ation infirmier :', error)
    throw new Error(error.response?.data?.message || 'Erreur de connexion')
  }
}
/**
 * R√©cup√®re le dossier m√©dical √©lectronique (DME) d'un patient.
 * @param {string|number} nurseId
 * @param {string|number} patientId
 */
export const apiGetPatientDme = async (nurseId, patientId) => {
  try {
    const response = await API.get(`/nurse/${nurseId}/patients/${patientId}/dme`);
    return response.data;
  } catch (error) {
    console.error('Erreur de r√©cup√©ration du DME :', error);
    throw new Error(error.response?.data?.message || 'Erreur de connexion');
  }
};

/**
 * Enregistre les signes vitaux d'un patient.
 * üîë CORRECTION: S'assure de l'inclusion de /dme/ dans l'URL.
 * @param {string|number} nurseId - L'ID de l'infirmier (doit √™tre un string/number).
 * @param {string|number} patientId - L'ID du patient (doit √™tre un string/number).
 * @param {object} data - Les donn√©es des signes vitaux.
 */
export const apiRecordVitalSigns = async (nurseId, patientId, data) => {
  try {
    // ‚úÖ Le chemin d'acc√®s est maintenant correct, incluant /dme/
    const response = await API.post(`/nurse/${nurseId}/patients/${patientId}/dme/vitalsigns`, data);
    return response.data;
  } catch (error) {
    console.error('Erreur d\'enregistrement des signes vitaux :', error);
    // Assurez-vous que l'erreur contient l'URL pour faciliter le d√©bogage (optionnel mais utile)
    throw new Error(error.response?.data?.message || `Erreur de connexion lors de l'appel POST √† /nurse/${nurseId}/patients/${patientId}/dme/vitalsigns`);
  }
};

/**
 * Cr√©e un rapport d'activit√© d'infirmi√®re.
 * @param {string|number} nurseId
 * @param {object} data
 */
export const apiCreateActivitiesReport = async (nurseId, data) => {
  try {
    const response = await API.post(`/nurse/${nurseId}/activities-report`, data);
    return response.data;
  } catch (error) {
    console.error('Erreur de cr√©ation du rapport :', error);
    throw new Error(error.response?.data?.message || 'Erreur de connexion');
  }
};

/**
 * R√©cup√®re l'aper√ßu de la banque de sang.
 * @param {string|number} nurseId
 */
export const apiGetBloodBankOverview = async (nurseId) => {
  try {
    // Utilise '/blood-bank' pour correspondre √† la route de votre fichier de routes
    const response = await API.get(`/nurse/${nurseId}/blood-bank`);
    return response.data;
  } catch (error) {
    console.error('Erreur de r√©cup√©ration de l\'aper√ßu de la banque de sang :', error);
    throw new Error(error.response?.data?.message || 'Erreur de connexion');
  }
};
