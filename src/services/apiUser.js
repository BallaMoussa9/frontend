// resources/js/services/apiUser.js

import API from './axios'; // Assurez-vous que './axios' est le bon chemin

// ----------------------------------------------------
// Fonctions pour la GESTION DES UTILISATEURS (Admin)
// ----------------------------------------------------

/**
 * Recherche des utilisateurs avec des filtres et pagination.
 * Accessible uniquement aux administrateurs.
 *
 * @param {Object} params - Les param√®tres de recherche et de pagination.
 * @returns {Promise<Object>} La r√©ponse de l'API avec les donn√©es pagin√©es.
 */
export const apiSearchUsers = async (params = {}) => {
    try {
        const response = await API.get('/admin/users/search', { params });
        return response.data;
    } catch (error) {
        console.error('Erreur lors de la recherche des utilisateurs :', error);
        throw new Error(error.response?.data?.message || 'Erreur lors de la recherche des utilisateurs.');
    }
};

/**
 * R√©cup√®re tous les utilisateurs sans filtres ni pagination.
 *
 * @returns {Promise<Object[]>} Un tableau de tous les objets utilisateur.
 */
export const apiGetAllUsers = async () => {
    try {
        // Le chemin a √©t√© mis √† jour pour correspondre √† la route du contr√¥leur.
        const response = await API.get('/users/all');
        return response.data;
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration de tous les utilisateurs :', error);
        throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration de tous les utilisateurs.');
    }
};

/**
 * Supprime un utilisateur par son ID.
 * Accessible uniquement aux administrateurs.
 *
 * @param {number} userId - L'ID de l'utilisateur √† supprimer.
 * @returns {Promise<Object>} La r√©ponse de l'API.
 */
export const apiDeleteUser = async (userId) => {
    try {
        const response = await API.delete(`/admin/users/${userId}`);
        return response.data;
    } catch (error) {
        console.error(`Erreur lors de la suppression de l'utilisateur ${userId} :`, error);
        throw new Error(error.response?.data?.message || `Erreur lors de la suppression de l'utilisateur ${userId}.`);
    }
};

/**
 * Met √† jour le r√¥le d'un utilisateur sp√©cifique.
 * Accessible uniquement aux administrateurs.
 *
 * @param {number} userId - L'ID de l'utilisateur √† modifier.
 * @param {string} newRole - Le nouveau r√¥le √† assigner (ex: 'doctor', 'admin').
 * @returns {Promise<Object>} La r√©ponse de l'API.
 */
export const apiUpdateUserRole = async (userId, newRole) => {
    try {
        const response = await API.put(`/admin/users/${userId}/role`, { role: newRole });
        return response.data;
    } catch (error) {
        console.error(`Erreur lors de la mise √† jour du r√¥le de l'utilisateur ${userId} :`, error);
        throw new Error(error.response?.data?.message || `Erreur lors de la mise √† jour du r√¥le de l'utilisateur ${userId}.`);
    }
};

/**
 * R√©cup√®re la liste de tous les r√¥les disponibles dans le syst√®me.
 * Accessible uniquement aux administrateurs.
 *
 * @returns {Promise<string[]>} Un tableau de noms de r√¥les (ex: ['admin', 'doctor', 'patient']).
 */
export const apiGetAvailableRoles = async () => {
    try {
        const response = await API.get('/admin/roles');
        return response.data;
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des r√¥les disponibles :', error);
        throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des r√¥les disponibles.');
    }
};

/**
 * R√©cup√®re la liste de tous les d√©partements.
 * Accessible uniquement aux administrateurs.
 *
 * @returns {Promise<Object[]>} Un tableau d'objets d√©partement (ex: [{ id: 1, name: 'M√©decine G√©n√©rale' }]).
 */
export const apiGetDepartments = async () => {
    try {
        const response = await API.get('/admin/departments');
        return response.data;
    } catch (error) {
        console.error('Erreur lors de la r√©cup√©ration des d√©partements :', error);
        throw new Error(error.response?.data?.message || 'Erreur lors de la r√©cup√©ration des d√©partements.');
    }
};


// ----------------------------------------------------
// Fonctions pour la GESTION DU PROFIL DE L'UTILISATEUR CONNECT√â
// ----------------------------------------------------

/**
 * Met √† jour les informations de profil de l'utilisateur AUTHENTIFI√â.
 *
 * @param {Object} userData - Donn√©es du profil (first_name, last_name, email, phone, etc.).
 * @returns {Promise<Object>} La r√©ponse de l'API.
 */
export const apiUpdateProfileInformation = async (userData) => {
    try {
        const response = await API.put('/user/profile-information', userData);
        return response.data;
    } catch (error) {
        console.error('Erreur lors de la mise √† jour des informations de profil :', error);
        throw new Error(error.response?.data?.message || '√âchec de la mise √† jour des informations de profil.');
    }
};

/**
 * Met √† jour le mot de passe de l'utilisateur AUTHENTIFI√â.
 *
 * @param {Object} passwordData - Donn√©es du mot de passe (current_password, password, password_confirmation).
 * @returns {Promise<Object>} La r√©ponse de l'API.
 */
export const apiUpdatePassword = async (passwordData) => {
    try {
        const response = await API.put('/user/password', passwordData);
        return response.data;
    } catch (error) {
        // Loggez l'erreur compl√®te pour le d√©bogage
        console.error('Erreur lors de la mise √† jour du mot de passe :', error);

        // --- GESTION SP√âCIFIQUE DES ERREURS DE VALIDATION (STATUT 422) ---
        if (error.response && error.response.status === 422) {
            const validationErrors = error.response.data.errors;

            // Cherchez le message d'erreur pour 'current_password'
            if (validationErrors && validationErrors.current_password) {
                // Renvoie le message d'erreur sp√©cifique du backend
                throw new Error(validationErrors.current_password[0]);
            }

            // Si d'autres erreurs de validation sont pr√©sentes (ex: 'password' trop court)
            // Vous pouvez it√©rer sur toutes les erreurs si n√©cessaire
            if (validationErrors) {
                const firstErrorKey = Object.keys(validationErrors)[0];
                if (firstErrorKey) {
                    throw new Error(validationErrors[firstErrorKey][0]);
                }
            }

            // Fallback pour les erreurs 422 sans messages sp√©cifiques format√©s comme attendu
            throw new Error(error.response.data.message || 'Donn√©es de mot de passe invalides.');
        }
        // --- FIN GESTION SP√âCIFIQUE DES ERREURS DE VALIDATION ---

        // G√©rer les erreurs r√©seau
        if (error.code === 'ERR_NETWORK') {
            throw new Error('Erreur r√©seau : Impossible de joindre le serveur.');
        }

        // G√©rer les autres types d'erreurs (401 Unauthorized, 500 Internal Server Error, etc.)
        throw new Error(error.response?.data?.message || 'Une erreur inattendue est survenue lors de la mise √† jour du mot de passe.');
    }
};
/**
 * Met √† jour la photo de profil de l'utilisateur AUTHENTIFI√â.
 *
 * @param {File} photoFile - Le fichier image de la nouvelle photo de profil.
 * @returns {Promise<Object>} La r√©ponse de l'API.
 */
export const apiUpdateProfilePhoto = async (photoFile) => {
    try {
        const formData = new FormData();
        formData.append('profile_photo', photoFile);

        const response = await API.post('/profile/photo', formData, {
            headers: {
                'Content-Type': 'multipart/form-data', // Important pour l'envoi de fichiers
            },
        });
        return response.data;
    } catch (error) {
        console.error('Erreur lors de la mise √† jour de la photo de profil :', error);
        throw new Error(error.response?.data?.message || '√âchec de la mise √† jour de la photo de profil.');
    }
};
export const apiGetPatientByUserId = async (userId) => {
    try {
        // üö® CORRECTION : Utiliser API (en majuscules)
        const response = await API.get(`patients/by-user/${userId}`);
        return response.data;
    } catch (error) {
        console.error("Erreur lors du chargement du patient par ID utilisateur (API):", error);
        throw error;
    }
};
/**
 * R√©cup√®re le profil docteur complet associ√© √† un ID utilisateur.
 * @param {number} userId L'ID de l'utilisateur.
 * @returns {Promise<object>} L'objet docteur.
 */
export const apiGetDoctorByUserId = async (userId) => {
    console.log(`Calling API to get doctor by user ID: ${userId}`);
    const response = await API.get(`/doctors/by-user/${userId}`);
    return response.data; // Le backend renvoie { doctor: {...} }
};
/**
 * R√©cup√®re le profil infirmier complet associ√© √† un ID utilisateur.
 * @param {number} userId L'ID de l'utilisateur.
 * @returns {Promise<object>} L'objet infirmier { id: nurseId, user_id: userId, ...}.
 */
export const apiGetNurseByUserId = async (userId) => {
    try {
        console.log(`Calling API to get nurse by user ID: ${userId}`);

        // üîë Utilisation de la route /nurses/user/{userId} d√©finie pr√©c√©demment
        const response = await API.get(`/nurse/user/${userId}`);

        // On suppose que le backend Laravel renvoie directement l'objet { id: nurseId, user_id: userId, ...}
        return response.data;

    } catch (error) {
        console.error(`Erreur lors du chargement de l'infirmier par ID utilisateur ${userId} (API):`, error);
        // Lance l'erreur pour que le store puisse la g√©rer
        throw new Error(error.response?.data?.message || `√âchec de la r√©cup√©ration de l'infirmier pour l'utilisateur ${userId}.`);
    }
};
export const apiExportReport = async (data) => {
    try {
        const response = await API.post('/report/export', data, {
            responseType: 'blob',
            withCredentials: true, // ‚úÖ indispensable avec Sanctum
        });

        const contentDisposition = response.headers['content-disposition'];
        let filename = 'rapport_sante_ko.docx';
        if (contentDisposition) {
            const matches = /filename="([^"]*)"/.exec(contentDisposition);
            if (matches != null && matches[1]) {
                filename = matches[1];
            }
        }

        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', filename);
        document.body.appendChild(link);
        link.click();
        link.remove();
        window.URL.revokeObjectURL(url);

        return { success: true, message: 'Rapport Word t√©l√©charg√©.' };

    } catch (error) {
        console.error('Erreur lors de l\'exportation du rapport :', error);
        throw new Error(error.response?.data?.message || '√âchec de la g√©n√©ration et du t√©l√©chargement du rapport.');
    }
};
